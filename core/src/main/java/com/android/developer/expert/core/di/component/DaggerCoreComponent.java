// Generated by Dagger (https://dagger.dev).
package com.android.developer.expert.core.di.component;

import android.app.Application;
import com.android.developer.expert.core.data.repository.FavoriteRepositoryImpl;
import com.android.developer.expert.core.data.repository.FavoriteRepositoryImpl_Factory;
import com.android.developer.expert.core.data.repository.MovieRepositoryImpl;
import com.android.developer.expert.core.data.repository.MovieRepositoryImpl_Factory;
import com.android.developer.expert.core.data.repository.SearchRepositoryImpl;
import com.android.developer.expert.core.data.repository.SearchRepositoryImpl_Factory;
import com.android.developer.expert.core.data.repository.TvRepositoryImpl;
import com.android.developer.expert.core.data.repository.TvRepositoryImpl_Factory;
import com.android.developer.expert.core.domain.repository.FavoriteRepository;
import com.android.developer.expert.core.domain.repository.MovieRepository;
import com.android.developer.expert.core.domain.repository.SearchRepository;
import com.android.developer.expert.core.domain.repository.TvRepository;
import com.android.developer.expert.core.domain.usecase.Interactor;
import com.android.developer.expert.core.domain.usecase.InteractorImpl;
import com.android.developer.expert.core.domain.usecase.InteractorImpl_Factory;
import com.the.movie.db.di.module.DatabaseModule;
import com.the.movie.db.di.module.DatabaseModule_ProvideDatabaseFactory;
import com.the.movie.db.di.module.DatabaseModule_ProvideMovieDaoFactory;
import com.the.movie.db.di.module.DatabaseModule_ProvideSearchDaoFactory;
import com.the.movie.db.di.module.DatabaseModule_ProvideTvDaoFactory;
import com.the.movie.db.di.module.NetworkModule;
import com.the.movie.db.di.module.NetworkModule_ProvideApiServiceFactory;
import com.the.movie.db.di.module.NetworkModule_ProvideOkHttpClientFactory;
import com.the.movie.db.di.module.NetworkModule_ProvideTrustManagersFactory;
import com.the.movie.db.source.local.DiscoverMovieDataSource;
import com.the.movie.db.source.local.DiscoverMovieDataSource_Factory;
import com.the.movie.db.source.local.DiscoverTvDataSource;
import com.the.movie.db.source.local.DiscoverTvDataSource_Factory;
import com.the.movie.db.source.local.MovieDataSource;
import com.the.movie.db.source.local.MovieDataSource_Factory;
import com.the.movie.db.source.local.SearchDataSource;
import com.the.movie.db.source.local.SearchDataSource_Factory;
import com.the.movie.db.source.local.TvDataSource;
import com.the.movie.db.source.local.TvDataSource_Factory;
import com.the.movie.db.source.local.dao.MovieDao;
import com.the.movie.db.source.local.dao.SearchDao;
import com.the.movie.db.source.local.dao.TvDao;
import com.the.movie.db.source.local.database.TheMovieDbDatabase;
import com.the.movie.db.source.mediator.DiscoverMovieRemoteMediator;
import com.the.movie.db.source.mediator.DiscoverMovieRemoteMediator_Factory;
import com.the.movie.db.source.mediator.DiscoverTvRemoteMediator;
import com.the.movie.db.source.mediator.DiscoverTvRemoteMediator_Factory;
import com.the.movie.db.source.remote.RemoteMovieDataSource;
import com.the.movie.db.source.remote.RemoteMovieDataSource_Factory;
import com.the.movie.db.source.remote.RemoteSearchDataSource;
import com.the.movie.db.source.remote.RemoteSearchDataSource_Factory;
import com.the.movie.db.source.remote.RemoteTvDataSource;
import com.the.movie.db.source.remote.RemoteTvDataSource_Factory;
import com.the.movie.db.source.remote.network.ApiService;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import javax.net.ssl.X509TrustManager;
import okhttp3.OkHttpClient;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerCoreComponent implements CoreComponent {
  private Provider<Application> applicationProvider;

  private Provider<X509TrustManager> provideTrustManagersProvider;

  private Provider<OkHttpClient> provideOkHttpClientProvider;

  private Provider<ApiService> provideApiServiceProvider;

  private Provider<RemoteTvDataSource> remoteTvDataSourceProvider;

  private Provider<TheMovieDbDatabase> provideDatabaseProvider;

  private Provider<TvDao> provideTvDaoProvider;

  private Provider<TvDataSource> tvDataSourceProvider;

  private Provider<DiscoverTvDataSource> discoverTvDataSourceProvider;

  private Provider<DiscoverTvRemoteMediator> discoverTvRemoteMediatorProvider;

  private Provider<TvRepositoryImpl> tvRepositoryImplProvider;

  private Provider<TvRepository> bindsTvRepositoryImplProvider;

  private Provider<RemoteMovieDataSource> remoteMovieDataSourceProvider;

  private Provider<MovieDao> provideMovieDaoProvider;

  private Provider<MovieDataSource> movieDataSourceProvider;

  private Provider<DiscoverMovieDataSource> discoverMovieDataSourceProvider;

  private Provider<DiscoverMovieRemoteMediator> discoverMovieRemoteMediatorProvider;

  private Provider<MovieRepositoryImpl> movieRepositoryImplProvider;

  private Provider<MovieRepository> bindsMovieRepositoryImplProvider;

  private Provider<FavoriteRepositoryImpl> favoriteRepositoryImplProvider;

  private Provider<FavoriteRepository> bindsFavoriteRepositoryImplProvider;

  private Provider<RemoteSearchDataSource> remoteSearchDataSourceProvider;

  private Provider<SearchDao> provideSearchDaoProvider;

  private Provider<SearchDataSource> searchDataSourceProvider;

  private Provider<SearchRepositoryImpl> searchRepositoryImplProvider;

  private Provider<SearchRepository> bindsSearchRepositoryImplProvider;

  private Provider<InteractorImpl> interactorImplProvider;

  private Provider<Interactor> bindsInteractImplProvider;

  private DaggerCoreComponent(NetworkModule networkModuleParam, DatabaseModule databaseModuleParam,
      Application applicationParam) {

    initialize(networkModuleParam, databaseModuleParam, applicationParam);
  }

  public static CoreComponent.Factory factory() {
    return new Factory();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final NetworkModule networkModuleParam,
      final DatabaseModule databaseModuleParam, final Application applicationParam) {
    this.applicationProvider = InstanceFactory.create(applicationParam);
    this.provideTrustManagersProvider = DoubleCheck.provider(NetworkModule_ProvideTrustManagersFactory.create(networkModuleParam, applicationProvider));
    this.provideOkHttpClientProvider = DoubleCheck.provider(NetworkModule_ProvideOkHttpClientFactory.create(networkModuleParam, applicationProvider, provideTrustManagersProvider));
    this.provideApiServiceProvider = DoubleCheck.provider(NetworkModule_ProvideApiServiceFactory.create(networkModuleParam, provideOkHttpClientProvider));
    this.remoteTvDataSourceProvider = RemoteTvDataSource_Factory.create(provideApiServiceProvider);
    this.provideDatabaseProvider = DoubleCheck.provider(DatabaseModule_ProvideDatabaseFactory.create(databaseModuleParam, applicationProvider));
    this.provideTvDaoProvider = DoubleCheck.provider(DatabaseModule_ProvideTvDaoFactory.create(databaseModuleParam, provideDatabaseProvider));
    this.tvDataSourceProvider = TvDataSource_Factory.create(provideTvDaoProvider);
    this.discoverTvDataSourceProvider = DiscoverTvDataSource_Factory.create(provideTvDaoProvider);
    this.discoverTvRemoteMediatorProvider = DiscoverTvRemoteMediator_Factory.create(remoteTvDataSourceProvider, discoverTvDataSourceProvider);
    this.tvRepositoryImplProvider = TvRepositoryImpl_Factory.create(remoteTvDataSourceProvider, tvDataSourceProvider, discoverTvRemoteMediatorProvider);
    this.bindsTvRepositoryImplProvider = DoubleCheck.provider((Provider) tvRepositoryImplProvider);
    this.remoteMovieDataSourceProvider = RemoteMovieDataSource_Factory.create(provideApiServiceProvider);
    this.provideMovieDaoProvider = DoubleCheck.provider(DatabaseModule_ProvideMovieDaoFactory.create(databaseModuleParam, provideDatabaseProvider));
    this.movieDataSourceProvider = MovieDataSource_Factory.create(provideMovieDaoProvider);
    this.discoverMovieDataSourceProvider = DiscoverMovieDataSource_Factory.create(provideMovieDaoProvider);
    this.discoverMovieRemoteMediatorProvider = DiscoverMovieRemoteMediator_Factory.create(remoteMovieDataSourceProvider, discoverMovieDataSourceProvider);
    this.movieRepositoryImplProvider = MovieRepositoryImpl_Factory.create(remoteMovieDataSourceProvider, movieDataSourceProvider, discoverMovieRemoteMediatorProvider);
    this.bindsMovieRepositoryImplProvider = DoubleCheck.provider((Provider) movieRepositoryImplProvider);
    this.favoriteRepositoryImplProvider = FavoriteRepositoryImpl_Factory.create(movieDataSourceProvider, tvDataSourceProvider);
    this.bindsFavoriteRepositoryImplProvider = DoubleCheck.provider((Provider) favoriteRepositoryImplProvider);
    this.remoteSearchDataSourceProvider = RemoteSearchDataSource_Factory.create(provideApiServiceProvider);
    this.provideSearchDaoProvider = DoubleCheck.provider(DatabaseModule_ProvideSearchDaoFactory.create(databaseModuleParam, provideDatabaseProvider));
    this.searchDataSourceProvider = SearchDataSource_Factory.create(provideSearchDaoProvider);
    this.searchRepositoryImplProvider = SearchRepositoryImpl_Factory.create(remoteSearchDataSourceProvider, searchDataSourceProvider);
    this.bindsSearchRepositoryImplProvider = DoubleCheck.provider((Provider) searchRepositoryImplProvider);
    this.interactorImplProvider = InteractorImpl_Factory.create(bindsTvRepositoryImplProvider, bindsMovieRepositoryImplProvider, bindsFavoriteRepositoryImplProvider, bindsSearchRepositoryImplProvider);
    this.bindsInteractImplProvider = DoubleCheck.provider((Provider) interactorImplProvider);
  }

  @Override
  public Interactor provideInteractor() {
    return bindsInteractImplProvider.get();
  }

  private static final class Factory implements CoreComponent.Factory {
    @Override
    public CoreComponent create(Application application) {
      Preconditions.checkNotNull(application);
      return new DaggerCoreComponent(new NetworkModule(), new DatabaseModule(), application);
    }
  }
}
